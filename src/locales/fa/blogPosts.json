{
  "blogPost001Text": "## سفر من برای پیدا کردن عشق به برنامه‌نویسی\n\nمن در سپتامبر ۲۰۲۲ وارد رشته مهندسی کامپیوتر شدم. مثل بیشتر دانشجوهای این رشته، اولین زبانی که بهمون یاد دادن C++ بود. اما راستش رو بخواین… اصلاً خوشم نیومد. هیچ ارتباطی باهاش برقرار نکردم.\n\nاون موقع‌ها، شبکه‌های اجتماعی پر بود از حرف‌هایی مثل: «پایتون بهترین زبان برای شروعه!»\nپس تصمیم گرفتم امتحانش کنم. از این دوره پایتون به اون دوره پایتون می‌پریدم — توی یک سال، چهار دوره مختلف رو گذروندم — به امید اینکه بالاخره بتونم باهاش ارتباط بگیرم. آخرش با خودم گفتم: «باشه، شاید قدم بعدی جنگو باشه.»\nاما متنفر شدم. یعنی واقعاً **متنفر**.\n\nکاملاً سردرگم بودم. نمی‌دونستم دیگه باید چه مسیری رو برم. حتی نمی‌تونستم بدون کمک هوش مصنوعی کدی بنویسم که خودش همه‌چیز رو برام انجام بده. تا تیر ۲۰۲۳ تصمیم گرفتم پایتون رو برای همیشه کنار بذارم.\n\nبه چند تا از برنامه‌نویس‌های به‌ظاهر “موفق” پیام دادم تا راهنمایی بگیرم. اما به‌جای اینکه بی‌منت راه درست رو نشونم بدن، بیشترشون می‌خواستن منو به سمت مسیر خودشون، زبان خودشون، یا حتی پروژه‌های کاری خودشون بکشونن. این چیزی نبود که دنبالش بودم. من دنبال رویای دیگران نبودم — من می‌خواستم رویای *خودم* رو پیدا کنم. می‌خواستم زبانی رو کشف کنم که واقعاً عاشقش بشم.\n\nبعد از یک ماه دوری از کدنویسی، با خودم گفتم:\n*«نسترن… حداقل HTML رو یاد بگیر. از هیچی بهتره. هر زبانی هم که بعداً انتخاب کنی، HTML به کارت میاد.»*\n\nپس رفتم سراغ یوتیوب، دوره **Bro Code** برای HTML رو پیدا کردم و شروع کردم. برخلاف انتظارم… دیدم فوق‌العاده برام جذابه! طبیعی بود که قدم بعدی استایل‌دهی باشه. با خودم گفتم:\n*«نسترن، این فقط یه دوره ۶ ساعته CSS هست. تنبلی نکن. می‌تونی انجامش بدی.»*\n\nدوره CSS رو توی یک روز کامل کردم. و عاشق تک‌تک لحظه‌هاش شدم.\n\nبعد شروع کردم به انجام پروژه‌های کوچیک HTML + CSS که توی یوتیوب پیدا می‌کردم. اما خیلی‌هاشون یه ذره جاوااسکریپت لازم داشتن برای دکمه‌ها یا انیمیشن‌ها. توی ویدیوها سازنده‌ها می‌گفتن:\n*«نگران یادگیری این قسمت نباشید — فقط کد <script></script> رو کپی کنید.»*\n\nاما من نمی‌خواستم فقط کپی کنم. می‌خواستم *بفهمم* چی به چیه.\n\nاونجا بود که به یه **دوره ۹۰ ساعته جاوااسکریپت** توی یه پلتفرم ایرانی به اسم **سبزلرن** رسیدم. دوره به سه بخش تقسیم شده بود: مبتدی، متوسط، و پیشرفته. بخش مبتدی فقط ۱۰ ساعت بود، پس با خودم گفتم:\n*«عالیه. این باید همه مبانی لازم برای اون پروژه‌های کوچیک رو پوشش بده.»*\n\nاما تا آخر اون هفته… من تا نصفه‌های بخش متوسط پیش رفته بودم. کاملاً عاشق جاوااسکریپت شده بودم.\n\nمن همه‌چیزش رو دوست داشتم — منطقش، خلاقیتش، و امکانات بی‌نهایتش. البته هنوز با CSS مشکل داشتم (احتمالاً چون منبع خوبی براش نداشتم)، اما HTML رو خوب یاد گرفته بودم.\n\nالان هم دارم همه‌چیز دیگه‌ای که به خانواده جاوااسکریپت مربوطه یاد می‌گیرم: React، TypeScript، Tailwind CSS و خیلی چیزای دیگه. و عشقم به جاوااسکریپت؟ فقط داره قوی‌تر میشه — مهم نیست همکارام یا دوستام چی می‌گن. اونا می‌گن:\n*«جاوااسکریپت خیلی سخته. هیچ‌کدوم از ما نتونستیم کامل یادش بگیریم. تو چطور می‌تونی؟»*\n\nاما واقعیت اینه…\nوقتی چیزی رو دوست داری، سختی‌ها نمی‌ترسوننت — بهت انگیزه می‌دن.",
  "blogPost002Text": "### چطور TypeScript مسیر من رو به‌عنوان یک برنامه‌نویس تغییر داد\n\nمن همیشه دلم می‌خواست TypeScript یاد بگیرم — ولی همیشه اهمال‌کاری باعث می‌شد عقبش بندازم. از اون چیزهایی بود که می‌دونستم باید انجامش بدم، اما مدام به تعویق می‌افتاد.\n\nتا اینکه توی یکی از کلاس‌های دانشگاه — *طراحی و پیاده‌سازی زبان‌های برنامه‌سازی* — استاد اعلام کرد که همه باید درباره یک زبان برنامه‌نویسی ارائه بدن. طبیعتاً من می‌خواستم JavaScript رو انتخاب کنم. اما استاد از سمت چپ کلاس شروع کرد و خب، من آخر سمت راست نشسته بودم. تا وقتی نوبت من رسید، همه زبان‌های محبوب انتخاب شده بودن: Python، JavaScript، HTML، CSS، Swift، R، Go، Dart… همه.\n\nوقتی به من رسید، پرسیدم:\n*«می‌تونم یه فریم‌ورک انتخاب کنم، مثلاً React؟»*\nاستاد سرش رو تکون داد: *«نه، فقط زبان‌ها.»*\n\nهمون لحظه یه چیزی درونم گفت: *«این فرصته.»*\nمن همیشه به TypeScript کنجکاو بودم و در اعماق وجودم می‌خواستم خودم رو به چالش بکشم. پس گفتم: *«خب، پس TypeScript.»*\nاونم با رضایت سر تکون داد.\n\nپنج هفته برای آماده‌سازی وقت داشتم.\n\nتوی اون هفته‌ها، همه وجودم رو گذاشتم برای این ارائه. یه قالب Canva طراحی کردم که هنوز هم بهش افتخار می‌کنم [اینجا می‌تونی ببینیش](https://www.canva.com/design/DAGlk8BaHZE/GGKK8cesGXbvxn1vQoMGmw/edit?utm_content=DAGlk8BaHZE&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton)، کلی مقاله و مستند خوندم، و حتی بعضی از پروژه‌های قدیمی Vanilla JS و Reactم رو به TypeScript بازنویسی کردم.\n\nاما آماده‌سازی فقط کدنویسی نبود. من می‌خواستم ارائه‌ای بسازم که واقعاً به یاد موندنی باشه. همیشه باور داشتم مهارت‌های نرم خوبی دارم، و یکی از اون‌ها ارائه دادن با اعتمادبه‌نفسه. هدفم فقط این نبود که *TypeScript رو آموزش بدم* — می‌خواستم *الهام‌بخش* باشم.\n\nو وقتی روز ارائه رسید… موفق شدم.\n\nاستادم که به سخت‌گیری معروفه، معمولاً توی هر ارائه‌ای ایراد پیدا می‌کنه. هر خط، هر توضیح، هر جزئیات رو به چالش می‌کشه. بیشتر هم‌کلاسی‌هام زیر سؤال‌هاش کم می‌آوردن.\n\nاما من جور دیگه‌ای تمرین کرده بودم. رفتار استاد رو برای ChatGPT توضیح داده بودم و بهش گفته بودم: *«فرض کن استاد منی. تا می‌تونی سختگیر باش. هر سؤال سختی به ذهنت می‌رسه بپرس.»* \nپس وقتی جلوی کلاس ایستادم، آماده بودم.\n\nهر سؤال سختی که پرسید، با آرامش و حرفه‌ای جواب دادم. و وقتی همه‌چیز تموم شد، حرفی زد که هیچ‌وقت فراموش نمی‌کنم:\n\n*«اگه به بقیه ۲ نمره می‌دم، به تو ۲ بعلاوه می‌دم. ارائه‌ت در سطحی کاملاً متفاوت بود.»*\n\nاون روز فقط درباره گرفتن نمره نبود. درباره این بود که به خودم ثابت کنم می‌تونم با چالش روبه‌رو بشم، از منطقه امنم بیرون بیام و چیزی جدید رو به دست بیارم.\n\nو اینطوری شد که TypeScript فقط یه ابزار دیگه توی مسیر برنامه‌نویسی من نشد — بلکه به نقطه عطفی تبدیل شد در نگاه من به یادگیری، رشد و اعتمادبه‌نفس به‌عنوان یک برنامه‌نویس.",
  "blogPost003Text": "## عاشق شدن به React\n\nمثل خیلی از برنامه‌نویس‌های جاوااسکریپت، من هم درست بعد از یادگیری مقدمات JS، وارد React شدم. راستش کمی عجولانه بود — یک‌راست رفتم سراغ دوره **React + Redux** از Jonas Schmedtmann توی Udemy. دوره فوق‌العاده بود، اما صادقانه بگم… هیچ‌وقت کامل تمومش نکردم.\n\nبه جاش فرصتی پیش اومد که به یک استارتاپ محلی در دانشگاه بپیوندم، جایی که React رو با تمرین و پروژه‌های واقعی یاد گرفتم. اون تجربه عملی در عمل حتی ارزشمندتر بود. به لطف پایه‌ای که از دوره Jonas داشتم، تونستم چیزهایی که از مستندات می‌خوندم رو با کار روی پروژه واقعی ترکیب کنم.\n\nگاهی فکر می‌کنم کاش دوره رو کامل می‌گذروندم — مخصوصاً که Jonas بعداً اون رو با **Next.js** هم به‌روزرسانی کرد. اما خب راه برگشتی نیست. با گذر زمان، سبک یادگیری من تغییر کرد. دیگه از دیدن ساعت‌ها آموزش ویدیویی طولانی لذت نمی‌برم. در عوض، بیشتر راحت و راضی‌ام که مستندات رو بخونم و مستقیم شروع کنم به ساختن.\n\nبرای آینده، قطعاً می‌خوام دانشم رو در **Redux** عمیق‌تر کنم و بیشتر وارد دنیای **Next.js** بشم (درباره این یکی توی یه پست دیگه بیشتر می‌نویسم 😉).\n\nیکی از چیزهایی که هیچ‌وقت از اون استارتاپ یادم نمی‌ره اینه که چقدر اصرار داشتن من به **Vue.js** یا حتی **Dart** مهاجرت کنم، فقط برای اینکه پروژه سریع‌تر پیش بره. اما عشق من به React اجازه نداد. نمی‌خواستم ترکش کنم — و راستش خوشحالم که بهش وفادار موندم.",
  "blogPost004Text": "## چرا از TailwindCSS استفاده می‌کنم\n\nTailwindCSS یک فریم‌ورک CSS با رویکرد utility-first هست که روش استایل‌دهی توسعه‌دهنده‌ها رو متحول می‌کنه. به‌جای نوشتن فایل‌های طولانی CSS و جابه‌جایی مداوم بین HTML و CSS، با Tailwind می‌تونی مستقیماً داخل کد مارکاپ، با استفاده از کلاس‌های کوچک و قابل ترکیب، استایل بدی.\n\nاوایل ممکنه اسم‌های طولانی کلاس‌ها ترسناک به نظر برسن، اما وقتی بهشون عادت کنی، توسعه خیلی سریع‌تر و روان‌تر می‌شه. دیگه لازم نیست اسم‌های جدید برای کلاس‌ها بسازی یا نگران override شدن استایل‌ها باشی — همه‌چیز دقیقاً همون‌جا که لازم داری اعمال می‌شه.\n\n### چرا TailwindCSS متفاوت است\n- **سرعت:** دیگه خبری از نوشتن CSS تکراری یا پرش بین فایل‌ها نیست.  \n- **یکپارچگی:** Tailwind یک سیستم طراحی از پیش تعریف‌شده شامل فاصله‌ها، رنگ‌ها و تایپوگرافی ارائه می‌ده.  \n- **شخصی‌سازی:** فایل `tailwind.config.js` کنترل کامل برای گسترش تم‌ها و اضافه کردن utilityهای دلخواهت رو می‌ده.  \n- **واکنش‌گرا به صورت پیش‌فرض:** breakpointها از قبل تعریف شدن، بنابراین طراحی ریسپانسیو خیلی راحت انجام می‌شه.  \n- **بیلد سبک‌تر:** با قابلیت purge، استایل‌های استفاده‌نشده به‌صورت خودکار حذف می‌شن.  \n\n### مقایسه Tailwind با فریم‌ورک‌های سنتی\nبرخلاف فریم‌ورک‌هایی مثل Bootstrap، Tailwind تو رو مجبور به استفاده از کامپوننت‌های آماده با ظاهر «فریم‌ورکی» نمی‌کنه. در عوض، بلوک‌های ساختاری لازم برای ایجاد **طراحی منحصر به فرد خودت** رو سریع‌تر بهت می‌ده — بدون اینکه مجبور باشی با استایل‌های از پیش تعریف‌شده بجنگی.\n\n### تجربه من با Tailwind\nبعد از استفاده از Tailwind در چند پروژه، متوجه تغییر بزرگی در نحوه نوشتن CSS شدم. استایل‌دهی بیشتر شبیه ساختن با لگو می‌شه: ساده، قابل استفاده مجدد و کارآمد. مخصوصاً با **React** و **Next.js** خیلی خوب جور درمیاد، چون استایل‌ها درست کنار کامپوننت‌ها قرار می‌گیرن.  \n\nبرای من، TailwindCSS فراتر از یک فریم‌ورک بوده — یک تقویت‌کننده بهره‌وری. باعث می‌شه استایل‌نویسی طبیعی‌تر باشه و تمرکزم رو روی چیزی که مهم‌تره نگه داره: ساختن تجربه‌های کاربری عالی.",
  "blogPost005Text": "## چطور Node.js یاد گرفتم و پتانسیل خودم را کشف کردم\n\nداستان یادگیری Node.js من با شهری شروع می‌شود که در آن زندگی می‌کنم. در شهر فعلی من تقریباً هیچ شغل برنامه‌نویسی وجود ندارد. شرکت‌ها عمدتاً از WordPress استفاده می‌کنند و راستش… این سبک برای من نیست. همیشه به برنامه‌نویسی واقعی، ساختن چیزها از صفر و نه فقط شخصی‌سازی قالب‌ها، علاقه داشتم.\n\nزمانی که در مشهد زندگی می‌کردم، فرصت شرکت در یک کارآموزی را داشتم. اما آن تابستان نتوانستم به مشهد بازگردم تا در اکثر کارآموزی‌ها شرکت کنم. تنها موقعیت موجود که مناسب من بود، یک کارآموزی بک‌اند بود و نیاز داشت چیزهایی را یاد بگیرم که قبلاً چندان با آنها کار نکرده بودم: Node.js، GitHub، Git، MongoDB و SQL.\n\nبا اراده قوی، سراغ یادگیری همه آنها رفتم. یادم می‌آید دو یا سه هفته فقط تمرین می‌کردم، آموزش‌ها را می‌دیدم، مستندات را می‌خواندم و با پروژه‌های کوچک آزمایش می‌کردم. اوایل کمی سخت بود، اما به زودی متوجه شدم چیزی شگفت‌انگیز اتفاق افتاده: من واقعاً می‌توانستم همه این‌ها را در چنین زمان کوتاهی یاد بگیرم. برای من این بسیار ارزشمند بود. همیشه در دوره‌ها یا موضوعات دیگر کمی تنبل بودم، اما اینجا حس می‌کردم غیرقابل توقفم.\n\nوقتی زمان مصاحبه رسید، خبر ناامیدکننده‌ای دریافت کردم. گفتند هنوز نیمه راه کارشناسی هستم و از آنجا که به‌طور دائم در شهر زندگی نمی‌کنم، بعد از کارآموزی نمی‌توانند من را استخدام کنند. فرصت را از دست داده بودم.\n\nاما به جای احساس شکست، احساس افتخار کردم. به خودم ثابت کرده بودم که می‌توانم یک استک کاملاً جدید — Node.js، دیتابیس‌ها، Git و GitHub — را تنها در چند هفته یاد بگیرم. آن لحظه به من اعتماد به نفس داد. فهمیدم اگر ذهنم را روی چیزی متمرکز کنم، می‌توانم خیلی بیشتر از چیزی که تصور می‌کردم به دست بیاورم.\n\nاز آن زمان به بعد، همچنان روی این پایه ساخت و یادگیری را ادامه داده‌ام. به‌طور منظم تمرین می‌کنم، ابزارهای جدید را کشف می‌کنم و پروژه‌های کوچک انجام می‌دهم. آن تابستان چیزی مهم‌تر از Node.js به من یاد داد: می‌توانم هر چیزی را یاد بگیرم، به شرطی که واقعاً بخواهم. و گاهی چالش‌هایی که ابتدا خسته‌کننده به نظر می‌رسند، در نهایت پاداش‌بخش‌ترین درس‌ها هستند.",
  "blogPost006Text": "## کشف Next.js: از React تا پروژه‌های واقعی\n\nبعد از صرف زمان قابل توجهی برای یادگیری و تمرین React، به نظر می‌رسید قدم طبیعی بعدی، کاوش در **Next.js** باشد. راستش را بخواهید، من با دوره‌های طولانی یا آموزش‌های رسمی شروع نکردم. در عوض، تصمیم گرفتم از طریق پروژه‌های واقعی وارد شوم — همان تجربه عملی که شما را مجبور می‌کند سریع یاد بگیرید، اشتباه کنید و راه‌حل‌ها را پیدا کنید.\n\nخود پرتفولیوی من به اولین زمین بازی واقعی من برای Next.js تبدیل شد. می‌خواستم بفهمم React چگونه می‌تواند با رندر سمت سرور، مسیریابی و تولید صفحات استاتیک کار کند. در ابتدا کمی گیج‌کننده بود — مفاهیم جدید بودند و گاهی نمی‌دانستم پروژه را درست سازمان‌دهی کنم. اما متوجه شدم که مطالعه دقیق **مستندات رسمی** و آزمایش همزمان واقعاً موثر است.\n\nصادقانه بگویم: هنوز حس می‌کنم یک مبتدی هستم. لحظاتی پیش می‌آید که مطمئن نیستم کاری که انجام می‌دهم بهترین روش است یا نه، یا یک اشتباه کوچک باعث خراب شدن ظاهر یا عملکرد پروژه می‌شود. اما این بخشی از فرایند یادگیری است و سعی می‌کنم آن را بپذیرم. هر باگی که رفع می‌کنم و هر ویژگی که پیاده‌سازی می‌کنم، چیز جدیدی درباره عملکرد داخلی Next.js به من یاد می‌دهد.\n\nیکی از چیزهایی که واقعاً در این روش یادگیری قدردانش هستم، این است که فقط دستورات را حفظ نمی‌کنم یا قدم‌به‌قدم دنبال نمی‌کنم. من واقعاً **چیزها می‌سازم**، نتایج را فوراً می‌بینم و دلیل هر تصمیم را می‌فهمم. این باعث می‌شود کل تجربه بسیار واقعی‌تر و رضایت‌بخش‌تر از دیدن ویدیو به صورت منفعلانه باشد.\n\nبه آینده نگاه می‌کنم و می‌دانم هنوز چیزهای زیادی برای کاوش دارم — مسیریابی پیشرفته، دریافت داده، بهینه‌سازی‌ها و ادغام آن با TypeScript. اما فعلاً خوشحالم که پروژه به پروژه جلو می‌روم، به‌طور ارگانیک یاد می‌گیرم و آرام آرام اعتماد به نفس پیدا می‌کنم.\n\nNext.js ممکن است هنوز برای من تازه باشد، اما حس می‌کنم بالاخره دارم می‌بینم چگونه در جریان کاری من به عنوان یک توسعه‌دهنده React جای می‌گیرد. حتی به عنوان یک مبتدی، می‌توانم قدر قدرت و انعطاف‌پذیری آن را در ساخت برنامه‌های مدرن وب درک کنم."
}
